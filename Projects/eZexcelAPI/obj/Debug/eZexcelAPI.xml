<?xml version="1.0"?>
<doc>
<assembly>
<name>
eZexcelAPI
</name>
</assembly>
<members>
<member name="P:eZstd.eZexcelAPI.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:eZstd.eZexcelAPI.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:eZstd.eZexcelAPI.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.ConnectToExcel(System.String)">
	<summary>
 创建对Excel工作簿的连接
 </summary>
	<param name="ExcelWorkbookPath">要进行连接的Excel工作簿的路径</param>
	<returns>一个OleDataBase的Connection连接，此连接还没有Open。</returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.GetSheetsName(System.Data.OleDb.OleDbConnection)">
	<summary>
 从对于Excel的数据连接中获取Excel工作簿中的所有工作表
 </summary>
	<param name="conn"></param>
	<returns>如果此连接不是连接到Excel数据库，则返回Nothing</returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.CreateNewTable(System.Data.OleDb.OleDbConnection,System.String)">
	<summary>
 创建一个新的Excel工作表，并向其中插入一条数据
 </summary>
	<param name="conn"></param>
	<param name="TableName">要新创建的工作表名称</param>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.InsertToTable(System.Data.OleDb.OleDbConnection,System.String,System.String,System.Object)">
	<summary>
 向Excel工作表中插入一条数据，此函数并不通用，不建议使用
 </summary>
	<param name="conn"></param>
	<param name="TableName">要插入数据的工作表名称</param>
	<param name="FieldName">要插入到的字段</param>
	<param name="Value">实际插入的数据</param>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.GetDataFromExcel(System.Data.OleDb.OleDbConnection,System.String,System.String)">
	<summary>
 读取Excel工作簿中的数据
 </summary>
	<param name="conn">OleDB的数据连接</param>
	<param name="SheetName">要读取的数据所在的工作表</param>
	<param name="FieldName">在读取的字段</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.AdoForExcel.ConnectionSourceValidated(System.Data.OleDb.OleDbConnection)">
	<summary>
 验证连接的数据源是否是Excel数据库
 </summary>
	<param name="conn"></param>
	<returns>如果是Excel数据库，则返回True，否则返回False。</returns>
	<remarks></remarks>
</member><member name="T:eZstd.eZexcelAPI.AdoForExcel">
	<summary>
 利用ADO.NET连接Excel数据库，并执行相应的操作：  
 创建表格，读取数据，写入数据，获取工作簿中的所有工作表名称。
 </summary>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.ConvertRangeDataToVector``1(Microsoft.Office.Interop.Excel.Range)">
	<summary>
 将Excel的Range对象的数据转换为指定数据类型的一维向量,
 Range.Value返回一个二维的表格，此函数将其数据按列行拼接为一维数组。
 （即按(0,0),(0,1),(1,0),(1,1),(2,0)...的顺序排列）
 </summary>
	<param name="rg">用于提取数据的Range对象</param>
	<returns>返回一个指定类型的一维向量，如“Single()”</returns>
	<remarks>直接用Range.Value来返回的数据，其类型只能是Object，
 而其中的数据是一个元素类型为Object的二维数据（即使此Range对象只有一行或者一列）。
 所以要进行显式的转换，将其转换为指定类型的向量或者二维数组，以便于后面的数据操作。</remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.ConvertRangeDataToMatrix``1(Microsoft.Office.Interop.Excel.Range)">
	<summary>
 将Excel的Range对象的数据转换为指定数据类型的二维数组
 </summary>
	<param name="rg">用于提取数据的Range对象</param>
	<returns>返回一个指定类型的二维数组，如“Single(,)”</returns>
	<remarks>直接用Range.Value来返回的数据，其类型只能是Object，
 而其中的数据是一个元素类型为Object的二维数据（即使此Range对象只有一行或者一列）。
 所以要进行显式的转换，将其转换为指定类型的向量或者二维数组，以便于后面的数据操作。</remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.ConvertColumnNumberToString(System.Int32)">
	<summary>
 将Excel表中的列的数值编号转换为对应的字符
 </summary>
	<param name="ColNum">Excel中指定列的数值序号</param>
	<returns>以字母序号的形式返回指定列的列号</returns>
	<remarks>1对应A；26对应Z；27对应AA</remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.ConvertColumnStringToNumber(System.String)">
	<summary>
 将Excel表中的字符编号转换为对应的数值
 </summary>
	<param name="colString">以A1形式表示的列的字母序号，不区分大小写</param>
	<returns>以整数的形式返回指定列的数值编号，A列对应数值1</returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.GetBottomRightCell(Microsoft.Office.Interop.Excel.Range)">
	<summary>
 获取指定Range范围中的右下角的那一个单元格
 </summary>
	<param name="RangeForSearch">要进行搜索的Range区域</param>
	<returns>指定Range区域中的左下角的单元格</returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.SheetCompare(Microsoft.Office.Interop.Excel.Worksheet,Microsoft.Office.Interop.Excel.Worksheet)">
	<summary>
 比较两个工作表是否相同。
 判断的标准：先判断工作表的名称是否相同，如果相同，再判断工作表所属的工作簿的路径是否相同，
 如果二者都相同，则认为这两个工作表是同一个工作表
 </summary>
	<param name="sheet1">进行比较的第1个工作表对象</param>
	<param name="sheet2">进行比较的第2个工作表对象</param>
	<returns></returns>
	<remarks>不用 blnSheetsMatched = sheet1.Equals(sheet2)，是因为这种方法并不能正确地返回True。</remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.MatchOpenedWkbk(System.String,Microsoft.Office.Interop.Excel.Application,System.Boolean@,System.Boolean,System.Boolean)">
	<summary>
 检测工作簿是否已经在指定的Application程序中打开。
 如果最后此工作簿在程序中被打开（已经打开或者后期打开），则返回对应的Workbook对象，否则返回Nothing。
 这种比较方法的好处是不会额外去打开已经打开过了的工作簿。
 </summary>
	<param name="wkbkPath">进行检测的工作簿</param>
	<param name="Application">检测工作簿所在的Application程序</param>
	<param name="blnFileHasBeenOpened">指示此Excel工作簿是否已经在此Application中被打开</param>
	<param name="OpenIfNotOpened">如果此Excel工作簿并没有在此Application程序中打开，是否要将其打开。</param>
	<param name="OpenByReadOnly">是否以只读方式打开</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.MatchWorksheet(Microsoft.Office.Interop.Excel.Workbook,System.String)">
	<summary>
 检测指定工作簿内是否有指定的工作表，如果存在，则返回对应的工作表对象，否则返回Nothing
 </summary>
	<param name="wkbk">进行检测的工作簿对象</param>
	<param name="sheetName">进行检测的工作表的名称</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.setPositionInChart(Microsoft.Office.Interop.Excel.Shape,Microsoft.Office.Interop.Excel.Axis,System.Double,System.Double)">
	<summary>
 将任意形状以指定的值定位在Chart的某一坐标轴中。
 </summary>
	<param name="ShapeToLocate">要进行定位的形状</param>
	<param name="Ax">此形状将要定位的轴</param>
	<param name="Value">此形状在Chart中所处的值</param>
	<param name="percent">将形状按指定的百分比的宽度或者高度的部位定位到坐标轴的指定值的位置。
 如果其值设定为0，则表示此形状的左端（或上端）定位在设定的位置处，
 如果其值为100，则表示此形状的右端（或下端）定位在设置的位置处。</param>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.setPositionInChart(Microsoft.Office.Interop.Excel.Axis,Microsoft.Office.Interop.Excel.Shape[],System.Double[],System.Double[])">
	<summary>
 将一组形状以指定的值定位在Chart的某一坐标轴中。
 </summary>
	<param name="ShapesToLocate">要进行定位的形状</param>
	<param name="Ax">此形状将要定位的轴</param>
	<param name="Values">此形状在Chart中所处的值</param>
	<param name="percents">将形状按指定的百分比的宽度或者高度的部位定位到坐标轴的指定值的位置。
 如果其值设定为0，则表示此形状的左端（或上端）定位在设定的位置处，
 如果其值为100，则表示此形状的右端（或下端）定位在设置的位置处。</param>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.GetPositionInChartByValue(Microsoft.Office.Interop.Excel.Axis,System.Double)">
	<summary>
 根据在坐标轴中的值，来返回这个值在Chart中的几何位置
 </summary>
	<param name="Ax"></param>
	<param name="Value"></param>
	<returns>如果Ax是一个水平X轴，则返回的是坐标轴Ax中的值Value在Chart中的Left值；
 如果Ax是一个竖向Y轴，则返回的是坐标轴Ax中的值Value在Chart中的Top值。</returns>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelFunction.GetPositionInChartByValue(Microsoft.Office.Interop.Excel.Axis,System.Double[])">
	<summary>
 根据一组形状在某一坐标轴中的值，来返回这些值在Chart中的几何位置
 </summary>
	<param name="Ax"></param>
	<param name="Values">要在坐标轴中进行定位的多个形状在此坐标轴中的数值</param>
	<returns>如果Ax是一个水平X轴，则返回的是坐标轴Ax中的值Value在Chart中的Left值；
 如果Ax是一个竖向Y轴，则返回的是坐标轴Ax中的值Value在Chart中的Top值。</returns>
	<remarks></remarks>
</member><member name="F:eZstd.eZexcelAPI.CellAddress.RowNum">
	<summary>
 单元格在Excel的Worksheet中的行号，左上角第一个单元格的行号值为1。
 在64位的Office 2010中，一个worksheet中共有1048576行，即2^20行。
 </summary>
</member><member name="F:eZstd.eZexcelAPI.CellAddress.ColNum">
	<summary>
 单元格在Excel的Worksheet中的列号，左上角第一个单元格的列号值为1。
 在64位的Office 2010中，一个worksheet中共有16384列（列号为XFD），即2^14列。
 </summary>
</member><member name="M:eZstd.eZexcelAPI.CellAddress.#ctor(System.Int32,System.Int16)">
	<summary>
 构造函数
 </summary>
	<param name="RowNum_">指定的单元格在Excel的Worksheet中的行号，左上角第一个单元格的行号值为1。</param>
	<param name="ColNum_">指定的单元格在Excel的Worksheet中的列号，左上角第一个单元格的列号值为1。</param>
</member><member name="T:eZstd.eZexcelAPI.CellAddress">
	<summary>
 指定的单元格在Excel的Worksheet中的位置。左上角第一个单元格的行号值为1，列号值为1。
 可以通过判断其行号或者列号是否为0来判断此类实例是否有赋值。
 </summary>
	<remarks></remarks>
</member><member name="M:eZstd.eZexcelAPI.ExcelExtension.Ex_CornerCell(Microsoft.Office.Interop.Excel.Range,eZstd.eZexcelAPI.ExcelExtension.CornerIndex)">
	<summary>
 返回Range对象范围中的最右下角点的那个单元格对象
 </summary>
	<param name="SourceRange">对于对Range.Areas.Item(1)中的单元格区域进行操作</param>
	<param name="Corner">要返回哪一个角落的单元格</param>
	<returns></returns>
</member><member name="M:eZstd.eZexcelAPI.ExcelExtension.Ex_ShrinkedRange(Microsoft.Office.Interop.Excel.Range)">
	<summary>
 收缩Range.Areas.Item(1)的单元格范围。
 在选择一个单元格范围时，有时为了界面操作简单，往往会选择一整列或者一整行，但是并不是要对基本所有的单元格进行操作，
 而只需要操作其中有数据的那些区域。此函数即是将选择的整行或者整列的单元格收缩到有数据的范围内。
 </summary>
	<param name="rg"></param>
	<returns></returns>
	<remarks>在选择一个单元格范围时，有时为了界面操作简单，往往会选择一整列或者一整行，但是并不是要对基本所有的单元格进行操作，
 而只需要操作其中有数据的那些区域。此函数即是将选择的整行或者整列的单元格收缩到有数据的范围内。</remarks>
</member>
</members>
</doc>