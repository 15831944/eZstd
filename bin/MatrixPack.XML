<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatrixPack</name>
    </assembly>
    <members>
        <member name="T:MatrixPack.CholeskyDecomposition">
            <summary>
            	Cholesky Decomposition of a symmetric, positive definite matrix.
            </summary>
            <remarks>
            	For a symmetric, positive definite matrix <c>A</c>, the Cholesky decomposition is a
            	lower triangular matrix <c>L</c> so that <c>A = L * L'</c>.
            	If the matrix is not symmetric or positive definite, the constructor returns a partial 
            	decomposition and sets two internal variables that can be queried using the
            	<see cref="P:MatrixPack.CholeskyDecomposition.IsSymmetric"/> and <see cref="P:MatrixPack.CholeskyDecomposition.IsPositiveDefinite"/> properties.
            </remarks>
        </member>
        <member name="M:MatrixPack.CholeskyDecomposition.#ctor(MatrixPack.Matrix)">
            <summary>Construct a Cholesky Decomposition.</summary>
        </member>
        <member name="M:MatrixPack.CholeskyDecomposition.Solve(MatrixPack.Matrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="rhs">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * L' * X = B</c>.</returns>
            <exception cref="T:System.ArgumentException">Matrix dimensions do not match.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is not symmetrix and positive definite.</exception>
        </member>
        <member name="P:MatrixPack.CholeskyDecomposition.IsSymmetric">
            <summary>Returns <see langword="true"/> if the matrix is symmetric.</summary>
        </member>
        <member name="P:MatrixPack.CholeskyDecomposition.IsPositiveDefinite">
            <summary>Returns <see langword="true"/> if the matrix is positive definite.</summary>
        </member>
        <member name="P:MatrixPack.CholeskyDecomposition.LeftTriangularFactor">
            <summary>Returns the left triangular factor <c>L</c> so that <c>A = L * L'</c>.</summary>
        </member>
        <member name="T:MatrixPack.EigenvalueDecomposition">
            <summary>
            	Determines the eigenvalues and eigenvectors of a real square matrix.
            </summary>
            <remarks>
            	If <c>A</c> is symmetric, then <c>A = V * D * V'</c> and <c>A = V * V'</c>
            	where the eigenvalue matrix <c>D</c> is diagonal and the eigenvector matrix <c>V</c> is orthogonal.
            	If <c>A</c> is not symmetric, the eigenvalue matrix <c>D</c> is block diagonal
            	with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues,
            	<c>lambda+i*mu</c>, in 2-by-2 blocks, <c>[lambda, mu; -mu, lambda]</c>.
            	The columns of <c>V</c> represent the eigenvectors in the sense that <c>A * V = V * D</c>.
            	The matrix V may be badly conditioned, or even singular, so the validity of the equation
            	<c>A=V*D*inverse(V)</c> depends upon the condition of <c>V</c>.
            </remarks>
        </member>
        <member name="M:MatrixPack.EigenvalueDecomposition.#ctor(MatrixPack.Matrix)">
            <summary>Construct an eigenvalue decomposition.</summary>
        </member>
        <member name="P:MatrixPack.EigenvalueDecomposition.RealEigenvalues">
            <summary>Returns the real parts of the eigenvalues.</summary>
        </member>
        <member name="P:MatrixPack.EigenvalueDecomposition.ImaginaryEigenvalues">
            <summary>Returns the imaginary parts of the eigenvalues.</summary>	
        </member>
        <member name="P:MatrixPack.EigenvalueDecomposition.EigenvectorMatrix">
            <summary>Returns the eigenvector matrix.</summary>
        </member>
        <member name="P:MatrixPack.EigenvalueDecomposition.DiagonalMatrix">
            <summary>Returns the block diagonal eigenvalue matrix.</summary>
        </member>
        <member name="T:MatrixPack.LuDecomposition">
            <summary>
              LU decomposition of a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with m &gt;= n, the LU decomposition is an m-by-n
              unit lower triangular matrix <c>L</c>, an n-by-n upper triangular matrix <c>U</c>,
              and a permutation vector <c>piv</c> of length m so that <c>A(piv)=L*U</c>.
              If m &lt; n, then <c>L</c> is m-by-m and <c>U</c> is m-by-n.
              The LU decompostion with pivoting always exists, even if the matrix is
              singular, so the constructor will never fail.  The primary use of the
              LU decomposition is in the solution of square systems of simultaneous
              linear equations. This will fail if <see cref="P:MatrixPack.LuDecomposition.IsNonSingular"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:MatrixPack.LuDecomposition.#ctor(MatrixPack.Matrix)">
            <summary>Construct a LU decomposition.</summary>	
        </member>
        <member name="M:MatrixPack.LuDecomposition.Solve(MatrixPack.Matrix)">
            <summary>Solves a set of equation systems of type <c>A * X = B</c>.</summary>
            <param name="B">Right hand side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>Matrix <c>X</c> so that <c>L * U * X = B</c>.</returns>
        </member>
        <member name="P:MatrixPack.LuDecomposition.IsNonSingular">
            <summary>Returns if the matrix is non-singular.</summary>
        </member>
        <member name="P:MatrixPack.LuDecomposition.Determinant">
            <summary>Returns the determinant of the matrix.</summary>
        </member>
        <member name="P:MatrixPack.LuDecomposition.LowerTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:MatrixPack.LuDecomposition.UpperTriangularFactor">
            <summary>Returns the lower triangular factor <c>L</c> with <c>A=LU</c>.</summary>
        </member>
        <member name="P:MatrixPack.LuDecomposition.PivotPermutationVector">
            <summary>Returns the pivot permuation vector.</summary>
        </member>
        <member name="T:MatrixPack.Matrix">
            <summary>Matrix provides the fundamental operations of numerical linear algebra.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>Constructs an empty matrix of the given size.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:MatrixPack.Matrix.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Constructs a matrix of the given size and assigns a given value to all diagonal elements.</summary>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
            <param name="value">Value to assign to the diagnoal elements.</param>
        </member>
        <member name="M:MatrixPack.Matrix.#ctor(System.Double[][])">
            <summary>Constructs a matrix from the given array.</summary>
            <param name="data">The array the matrix gets constructed from.</param>
        </member>
        <member name="M:MatrixPack.Matrix.Submatrix(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Start row index</param>
            <param name="i1">End row index</param>
            <param name="j0">Start column index</param>
            <param name="j1">End column index</param>
        </member>
        <member name="M:MatrixPack.Matrix.Submatrix(System.Int32[],System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="r">Array of row indices</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:MatrixPack.Matrix.Submatrix(System.Int32,System.Int32,System.Int32[])">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="i0">Starttial row index</param>
            <param name="i1">End row index</param>
            <param name="c">Array of row indices</param>
        </member>
        <member name="M:MatrixPack.Matrix.Submatrix(System.Int32[],System.Int32,System.Int32)">
            <summary>Returns a sub matrix extracted from the current matrix.</summary>
            <param name="r">Array of row indices</param>
            <param name="j0">Start column index</param>
            <param name="j1">End column index</param>
        </member>
        <member name="M:MatrixPack.Matrix.Clone">
            <summary>Creates a copy of the matrix.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.Transpose">
            <summary>Returns the transposed matrix.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.op_UnaryNegation(MatrixPack.Matrix)">
            <summary>Unary minus.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.op_Addition(MatrixPack.Matrix,MatrixPack.Matrix)">
            <summary>Matrix addition.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.op_Subtraction(MatrixPack.Matrix,MatrixPack.Matrix)">
            <summary>Matrix subtraction.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.op_Multiply(MatrixPack.Matrix,System.Double)">
            <summary>Matrix-scalar multiplication.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.op_Multiply(MatrixPack.Matrix,MatrixPack.Matrix)">
            <summary>Matrix-matrix multiplication.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.Solve(MatrixPack.Matrix)">
            <summary>Returns the LHS solution vetor if the matrix is square or the least squares solution otherwise.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.Random(System.Int32,System.Int32)">
            <summary>Returns a matrix filled with random values.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.Diagonal(System.Int32,System.Int32,System.Double)">
            <summary>Returns a diagonal matrix of the given size.</summary>
        </member>
        <member name="M:MatrixPack.Matrix.ToString">
            <summary>Returns the matrix in a textual form.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Rows">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Columns">
            <summary>Returns the number of columns.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.IsSquare">
            <summary>Return <see langword="true"/> if the matrix is a square matrix.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.IsSymmetric">
            <summary>Returns <see langword="true"/> if the matrix is symmetric.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Item(System.Int32,System.Int32)">
            <summary>Access the value at the given location.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Norm1">
            <summary>Returns the One Norm for the matrix.</summary>
            <value>The maximum column sum.</value>
        </member>
        <member name="P:MatrixPack.Matrix.InfinityNorm">
            <summary>Returns the Infinity Norm for the matrix.</summary>
            <value>The maximum row sum.</value>
        </member>
        <member name="P:MatrixPack.Matrix.FrobeniusNorm">
            <summary>Returns the Frobenius Norm for the matrix.</summary>
            <value>The square root of sum of squares of all elements.</value>
        </member>
        <member name="P:MatrixPack.Matrix.Inverse">
            <summary>Inverse of the matrix if matrix is square, pseudoinverse otherwise.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Determinant">
            <summary>Determinant if matrix is square.</summary>
        </member>
        <member name="P:MatrixPack.Matrix.Trace">
            <summary>Returns the trace of the matrix.</summary>
            <returns>Sum of the diagonal elements.</returns>
        </member>
        <member name="T:MatrixPack.QrDecomposition">
            <summary>
              QR decomposition for a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with <c>m &gt;= n</c>, the QR decomposition is an m-by-n
              orthogonal matrix <c>Q</c> and an n-by-n upper triangular 
              matrix <c>R</c> so that <c>A = Q * R</c>.
              The QR decompostion always exists, even if the matrix does not have
              full rank, so the constructor will never fail.  The primary use of the
              QR decomposition is in the least squares solution of nonsquare systems
              of simultaneous linear equations.
              This will fail if <see cref="P:MatrixPack.QrDecomposition.IsFullRank"/> returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:MatrixPack.QrDecomposition.#ctor(MatrixPack.Matrix)">
            <summary>Construct a QR decomposition.</summary>	
        </member>
        <member name="M:MatrixPack.QrDecomposition.Solve(MatrixPack.Matrix)">
            <summary>Least squares solution of <c>A * X = B</c></summary>
            <param name="rhs">Right-hand-side matrix with as many rows as <c>A</c> and any number of columns.</param>
            <returns>A matrix that minimized the two norm of <c>Q * R * X - B</c>.</returns>
            <exception cref="T:System.ArgumentException">Matrix row dimensions must be the same.</exception>
            <exception cref="T:System.InvalidOperationException">Matrix is rank deficient.</exception>
        </member>
        <member name="P:MatrixPack.QrDecomposition.IsFullRank">
            <summary>Shows if the matrix <c>A</c> is of full rank.</summary>
            <value>The value is <see langword="true"/> if <c>R</c>, and hence <c>A</c>, has full rank.</value>
        </member>
        <member name="P:MatrixPack.QrDecomposition.UpperTriangularFactor">
            <summary>Returns the upper triangular factor <c>R</c>.</summary>
        </member>
        <member name="P:MatrixPack.QrDecomposition.OrthogonalFactor">
            <summary>Returns the orthogonal factor <c>Q</c>.</summary>
        </member>
        <member name="T:MatrixPack.SingularValueDecomposition">
            <summary>
            	Singular Value Decomposition for a rectangular matrix.
            </summary>
            <remarks>
              For an m-by-n matrix <c>A</c> with <c>m >= n</c>, the singular value decomposition is
              an m-by-n orthogonal matrix <c>U</c>, an n-by-n diagonal matrix <c>S</c>, and
              an n-by-n orthogonal matrix <c>V</c> so that <c>A = U * S * V'</c>.
              The singular values, <c>sigma[k] = S[k,k]</c>, are ordered so that
              <c>sigma[0] >= sigma[1] >= ... >= sigma[n-1]</c>.
              The singular value decompostion always exists, so the constructor will
              never fail. The matrix condition number and the effective numerical
              rank can be computed from this decomposition.
            </remarks>
        </member>
        <member name="M:MatrixPack.SingularValueDecomposition.#ctor(MatrixPack.Matrix)">
            <summary>Construct singular value decomposition.</summary>
        </member>
        <member name="P:MatrixPack.SingularValueDecomposition.Condition">
            <summary>Returns the condition number <c>max(S) / min(S)</c>.</summary>
        </member>
        <member name="P:MatrixPack.SingularValueDecomposition.Norm2">
            <summary>Returns the Two norm.</summary>
        </member>
        <member name="P:MatrixPack.SingularValueDecomposition.Rank">
            <summary>Returns the effective numerical matrix rank.</summary>
            <value>Number of non-negligible singular values.</value>
        </member>
        <member name="P:MatrixPack.SingularValueDecomposition.Diagonal">
            <summary>Return the one-dimensional array of singular values.</summary>		
        </member>
    </members>
</doc>
